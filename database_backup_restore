to restore the database from a backup file directly inside your Laravel 10 eCommerce Admin Panel.
That‚Äôs possible, but ‚ö†Ô∏è very dangerous ‚Äî restoring means overwriting existing data.

üõ†Ô∏è Step 1: Routes

In routes/web.php (or routes/admin.php):

use App\Http\Controllers\Admin\DatabaseBackupController;

Route::middleware(['auth', 'is_admin'])->group(function () {
    Route::get('/admin/backup', [DatabaseBackupController::class, 'index'])->name('admin.backup.index');
    Route::post('/admin/backup/run', [DatabaseBackupController::class, 'backup'])->name('admin.backup.run');
    Route::get('/admin/backup/download/{filename}', [DatabaseBackupController::class, 'download'])->name('admin.backup.download');
    Route::post('/admin/backup/restore/{filename}', [DatabaseBackupController::class, 'restore'])->name('admin.backup.restore');
});


üõ†Ô∏è Step 2: Controller (Restore Method)

Update DatabaseBackupController.php:

public function restore($filename)
{
    $dbName = env('DB_DATABASE');
    $dbUser = env('DB_USERNAME');
    $dbPass = env('DB_PASSWORD');
    $dbHost = env('DB_HOST');

    $filePath = storage_path('app/backups/' . $filename);

    if (!file_exists($filePath)) {
        return redirect()->back()->with('error', 'Backup file not found.');
    }

    // ‚ö†Ô∏è Warning: This will overwrite existing data
    $command = "mysql -h {$dbHost} -u {$dbUser} -p'{$dbPass}' {$dbName} < {$filePath}";
    system($command);

    return redirect()->back()->with('success', 'Database restored successfully from ' . $filename);
}


üõ†Ô∏è Step 3: Blade View (Add Restore Button)

Edit resources/views/admin/backup/index.blade.php:

@extends('admin.layouts.app')

@section('content')
<div class="card">
    <div class="card-header">
        <h4>Database Backups</h4>
    </div>
    <div class="card-body">
        <form action="{{ route('admin.backup.run') }}" method="POST">
            @csrf
            <button type="submit" class="btn btn-primary mb-3">
                Create New Backup
            </button>
        </form>

        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>File Name</th>
                    <th>Size</th>
                    <th>Created</th>
                    <th>Download</th>
                    <th>Restore</th>
                </tr>
            </thead>
            <tbody>
                @foreach($files as $file)
                <tr>
                    <td>{{ $file['name'] }}</td>
                    <td>{{ $file['size'] }}</td>
                    <td>{{ date('Y-m-d H:i:s', $file['created']) }}</td>
                    <td>
                        <a href="{{ route('admin.backup.download', $file['name']) }}" class="btn btn-success btn-sm">
                            Download
                        </a>
                    </td>
                    <td>
                        <form action="{{ route('admin.backup.restore', $file['name']) }}" method="POST"
                              onsubmit="return confirm('‚ö†Ô∏è Restoring will overwrite all data. Continue?')">
                            @csrf
                            <button type="submit" class="btn btn-danger btn-sm">
                                Restore
                            </button>
                        </form>
                    </td>
                </tr>
                @endforeach
            </tbody>
        </table>
    </div>
</div>
@endsection




üîí Security Considerations

- Only super admin should access this feature.
- Always create a new backup before restoring.
- Add a confirmation popup before restore.
- Optionally log all restore actions in a database table (admin_logs).


üîÑ Admin Workflow

- Admin creates backup (Create New Backup).
- Later, sees the list of backups.
- Clicks Restore ‚Üí System executes .sql file into DB.
- Database is replaced with the chosen backup.



