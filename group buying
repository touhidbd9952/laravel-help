/////////group buying/////////////////

To implement this "group buying" or "group purchase" functionality in your Laravel 10 eCommerce app, you’ll need a system that handles:
Product groups with a shared quantity.
Discount pricing only if the full 10 quantity is purchased.
Time-bound group purchases (e.g., 24 hours).
Split purchases by multiple customers or single customer taking all.
Here's how you can approach it:
---
1. Database Schema Design

Tables you’ll need:


Schema::create('product_groups', function (Blueprint $table) {
    $table->id();
    $table->foreignId('product_id')->constrained()->onDelete('cascade');
    $table->integer('total_quantity')->default(10); // always 10
    $table->decimal('discount_price'); // price per item if group is full
    $table->timestamp('expires_at');
    $table->enum('status', ['active', 'completed', 'expired'])->default('active');
    $table->timestamps();
});


Schema::create('group_purchases', function (Blueprint $table) {
    $table->id();
    $table->foreignId('product_group_id')->constrained()->onDelete('cascade');
    $table->foreignId('user_id')->constrained()->onDelete('cascade');
    $table->integer('quantity');
    $table->timestamps();
});


2. Business Logic Overview

When Admin creates a group, the group starts with:
10 quantity.
24-hour timer (expires_at = now + 24h).
Active status.

When customers purchase:
Add a record to group_purchases.
Check if total quantity across all purchases = 10:
If so, mark group as completed and finalize all orders at discount price.

If time exceeds 24h and group not completed:
Expire the group, and cancel orders or offer at regular price.

If one customer buys all 10:
Treat as completed immediately.


3. Cron Job or Scheduled Task

To mark expired groups:
$schedule->call(function () {
    ProductGroup::where('status', 'active')
        ->where('expires_at', '<', now())
        ->update(['status' => 'expired']);
})->everyMinute();


4. Controller Logic (simplified)

Join group purchase:
public function joinGroupPurchase(Request $request, $groupId)
{
    $group = ProductGroup::findOrFail($groupId);
    if ($group->status !== 'active' || now()->greaterThan($group->expires_at)) {
        return back()->with('error', 'Group is no longer active.');
    }
    $purchasedQty = $group->groupPurchases()->sum('quantity');
    $remainingQty = $group->total_quantity - $purchasedQty;
    if ($request->quantity > $remainingQty) {
        return back()->with('error', 'Not enough quantity left.');
    }
    GroupPurchase::create([
        'product_group_id' => $group->id,
        'user_id' => auth()->id(),
        'quantity' => $request->quantity,
    ]);
    // Check if group is complete
    if ($purchasedQty + $request->quantity == $group->total_quantity) {
        $group->update(['status' => 'completed']);
        // Notify customers, finalize orders at discount price
    }
    return back()->with('success', 'You joined the group purchase!');
}


2. Blade View (resources/views/group-purchase.blade.php)

@extends('layouts.app')
@section('content')
<div class="container">
    <h2>{{ $group->product->name }}</h2>
    <p>Discount Price per Unit: ${{ $group->discount_price }}</p>
    <p>Time Left: {{ $group->expires_at->diffForHumans() }}</p>
    <p>Status: {{ ucfirst($group->status) }}</p>
    <p>Available Quantity: {{ $group->total_quantity - $purchasedQty }}</p>
    @if($group->status === 'active' && now()->lt($group->expires_at))
        <form action="{{ route('group-purchase.join', $group->id) }}" method="POST">
            @csrf
            <div class="form-group">
                <label for="quantity">Quantity to Buy</label>
                <input type="number" name="quantity" min="1" max="{{ $group->total_quantity - $purchasedQty }}" required>
            </div>
            <button type="submit" class="btn btn-success">Join Group Purchase</button>
        </form>
    @else
        <p class="text-danger">Group is no longer active.</p>
    @endif
</div>
@endsection


3. Routes (routes/web.php)

use App\Http\Controllers\GroupPurchaseController;
Route::get('/group-purchase/{group}', [GroupPurchaseController::class, 'show'])->name('group-purchase.show');
Route::post('/group-purchase/{group}/join', [GroupPurchaseController::class, 'join'])->name('group-purchase.join');


4. Controller Stub
// app/Http/Controllers/GroupPurchaseController.php

namespace App\Http\Controllers;
use App\Models\ProductGroup;
use App\Models\GroupPurchase;
use Illuminate\Http\Request;
class GroupPurchaseController extends Controller
{
    public function show(ProductGroup $group)
    {
        $purchasedQty = $group->groupPurchases()->sum('quantity');
        return view('group-purchase', compact('group', 'purchasedQty'));
    }
    public function join(Request $request, ProductGroup $group)
    {
        $request->validate(['quantity' => 'required|integer|min:1']);
        if ($group->status !== 'active' || now()->gt($group->expires_at)) {
            return back()->with('error', 'Group is no longer active.');
        }
        $purchasedQty = $group->groupPurchases()->sum('quantity');
        $remaining = $group->total_quantity - $purchasedQty;
        if ($request->quantity > $remaining) {
            return back()->with('error', 'Not enough quantity left.');
        }
        GroupPurchase::create([
            'product_group_id' => $group->id,
            'user_id' => auth()->id(),
            'quantity' => $request->quantity,
        ]);
        if ($request->quantity + $purchasedQty === $group->total_quantity) {
            $group->update(['status' => 'completed']);
            // Dispatch order confirmation/logic here
        }
        return back()->with('success', 'Successfully joined the group purchase.');
    }
}



1.	Eloquent Models

ProductGroup Model

// app/Models/ProductGroup.php
namespace App\Models;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
class ProductGroup extends Model
{
    use HasFactory;
    protected $fillable = [
        'product_id',
        'total_quantity',
        'discount_price',
        'expires_at',
        'status',
    ];
    protected $dates = ['expires_at'];
    public function product()
    {
        return $this->belongsTo(Product::class);
    }
    public function groupPurchases()
    {
        return $this->hasMany(GroupPurchase::class);
    }
}


GroupPurchase Model

// app/Models/GroupPurchase.php
namespace App\Models;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
class GroupPurchase extends Model
{
    use HasFactory;
    protected $fillable = [
        'product_group_id',
        'user_id',
        'quantity',
    ];
    public function group()
    {
        return $this->belongsTo(ProductGroup::class, 'product_group_id');
    }
    public function user()
    {
        return $this->belongsTo(User::class);
    }
}


Automatic Order Processing Logic:
This can be triggered in the join method after a group is marked as completed.

Update in GroupPurchaseController.php

if ($request->quantity + $purchasedQty === $group->total_quantity) {
    $group->update(['status' => 'completed']);

    // Dispatch background job or handle inline
    foreach ($group->groupPurchases as $purchase) {
        // generate order for each user
        Order::create([
            'user_id' => $purchase->user_id,
            'product_id' => $group->product_id,
            'quantity' => $purchase->quantity,
            'price' => $group->discount_price,
            'total' => $group->discount_price * $purchase->quantity,
            'status' => 'confirmed',
        ]);
    }
}


Order Migration and Model (Optional)

Migration
// database/migrations/xxxx_xx_xx_create_orders_table.php

Schema::create('orders', function (Blueprint $table) {
    $table->id();
    $table->foreignId('user_id')->constrained()->onDelete('cascade');
    $table->foreignId('product_id')->constrained()->onDelete('cascade');
    $table->integer('quantity');
    $table->decimal('price', 10, 2);
    $table->decimal('total', 10, 2);
    $table->string('status')->default('pending');
    $table->timestamps();
});

Model
// app/Models/Order.php
namespace App\Models;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
class Order extends Model
{
    use HasFactory;
    protected $fillable = [
        'user_id', 'product_id', 'quantity', 'price', 'total', 'status',
    ];
    public function user() { return $this->belongsTo(User::class); }
    public function product() { return $this->belongsTo(Product::class); }
}


This gives you:
A full group buying system.
Discount logic only when 10 items are purchased.
Order processing upon group completion.

Job setup (queue-based) for order processing or notification:
Here’s how you can handle group order processing and notifications using Laravel queues and background jobs.
---
1. Create the Job
Run this Artisan command:
php artisan make:job ProcessCompletedGroup
This will create a job class in app/Jobs/ProcessCompletedGroup.php.

2. Job Logic
Update the job to process orders for completed groups:
// app/Jobs/ProcessCompletedGroup.php
namespace App\Jobs;
use App\Models\ProductGroup;
use App\Models\Order;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
class ProcessCompletedGroup implements ShouldQueue
{
    use InteractsWithQueue, Queueable, SerializesModels;
    protected $group;
    public function __construct(ProductGroup $group)
    {
        $this->group = $group;
    }
    public function handle()
    {
        if ($this->group->status !== 'completed') return;
        foreach ($this->group->groupPurchases as $purchase) {
            Order::create([
                'user_id' => $purchase->user_id,
                'product_id' => $this->group->product_id,
                'quantity' => $purchase->quantity,
                'price' => $this->group->discount_price,
                'total' => $this->group->discount_price * $purchase->quantity,
                'status' => 'confirmed',
            ]);
            // Optionally send notification (email, database, etc.)
            $purchase->user->notify(new \App\Notifications\GroupPurchaseConfirmedNotification($this->group));
        }
    }
}

---
3. Dispatch the Job When Group is Full

Update your controller:

use App\Jobs\ProcessCompletedGroup;
// ...
if ($request->quantity + $purchasedQty === $group->total_quantity) {
    $group->update(['status' => 'completed']);
    // Dispatch to queue
    ProcessCompletedGroup::dispatch($group);
}

---
4. Setup Notifications (Optional)

Create a notification class:

php artisan make:notification GroupPurchaseConfirmedNotification


Basic example using mail:

// app/Notifications/GroupPurchaseConfirmedNotification.php

namespace App\Notifications;
use Illuminate\Notifications\Notification;
use Illuminate\Notifications\Messages\MailMessage;
use App\Models\ProductGroup;
class GroupPurchaseConfirmedNotification extends Notification
{
    public $group;
    public function __construct(ProductGroup $group)
    {
        $this->group = $group;
    }
    public function via($notifiable)
    {
        return ['mail']; // You can add 'database', 'broadcast', etc.
    }
    public function toMail($notifiable)
    {
        return (new MailMessage)
            ->subject('Your Group Purchase is Confirmed!')
            ->line('The group purchase for product "' . $this->group->product->name . '" is complete.')
            ->action('View Order', url('/orders'))
            ->line('Thank you for shopping with us!');
    }
}

---
5. Queue Setup
In .env, set:
QUEUE_CONNECTION=database
Then run:
php artisan queue:table
php artisan migrate
php artisan queue:work
---



how to automatically expire product groups after 24 hours using Laravel’s scheduler and a custom command.
---
1. Create the Artisan Command
Run:
php artisan make:command ExpireProductGroups

This creates a file at app/Console/Commands/ExpireProductGroups.php.

2. Update the Command Logic
// app/Console/Commands/ExpireProductGroups.php
namespace App\Console\Commands;
use Illuminate\Console\Command;
use App\Models\ProductGroup;
class ExpireProductGroups extends Command
{
    protected $signature = 'groups:expire';
    protected $description = 'Expire product groups that have passed their 24-hour window';
    public function handle()
    {
        $expiredGroups = ProductGroup::where('status', 'active')
            ->where('expires_at', '<', now())
            ->get();

        foreach ($expiredGroups as $group) {
            $group->update(['status' => 'expired']);

            // Optional: notify users their group expired
            foreach ($group->groupPurchases as $purchase) {
                $purchase->user->notify(new \App\Notifications\GroupExpiredNotification($group));
            }
        }
        $this->info("Expired " . $expiredGroups->count() . " group(s).");
    }
}
---


3. Register Command in Kernel
Open app/Console/Kernel.php and schedule it:

// app/Console/Kernel.php
protected function schedule(Schedule $schedule)
{
    $schedule->command('groups:expire')->everyMinute(); // or ->hourly(), etc.
}
Make sure the command is registered:
protected $commands = [
    \App\Console\Commands\ExpireProductGroups::class,
];
---

4. Set Up Laravel Scheduler
In your server’s cron tab, run:
* * * * * cd /path-to-your-project && php artisan schedule:run >> /dev/null 2>&1
This runs the Laravel scheduler every minute.
---

5. (Optional) Notification for Expired Groups
php artisan make:notification GroupExpiredNotification
Example:
public function toMail($notifiable)
{
    return (new MailMessage)
        ->subject('Group Purchase Expired')
        ->line('Unfortunately, the group purchase for "' . $this->group->product->name . '" has expired.')
        ->line('No payment was made. You can try again anytime.');
}
---
Now expired groups will be automatically marked and users can be notified. Want to auto-refund or retry logic as well?







